                           Using of voltron
                           ================

Author: Olexandr Sydorchuk <olexandr_syd [at] users.sourceforge.net>
Date: 2010-10-01 00:12:50 UTC


Table of Contents
=================
1 Overview 
    1.1 Basic Usage: 
2 Creating chat menu 
    2.1 Customising 
        2.1.1 `bind_keys' 
        2.1.2 `chatmenu_teama' 
        2.1.3 `chatmenu_teamb' 
        2.1.4 `chatmenu_spect' 
        2.1.5 `chatmenu_install' 
        2.1.6 `binds_teama_install' 
        2.1.7 `binds_teamb_install' 
        2.1.8 `binds_spect_install' 
        2.1.9 Template for menu 
        2.1.10 `backspace_cmd' 
        2.1.11 `fileSplitSize' 
        2.1.12 unbind 
        2.1.13 unbindTeams 
        2.1.14 bind 
        2.1.15 bindTeams 
        2.1.16 seta 
        2.1.17 setaTeams 
        2.1.18 `postInstall' 
        2.1.19 messages-from-file 


1 Overview 
~~~~~~~~~~~

  Voltron is generator of chatmenu for different HUDs of several games
  (primary for tremulous and [Volt  HUD] [1]). Also allow you add own
  binds into config  file, create message list and  auto split file if
  need.


  [Volt  HUD]: http://tremulous.net/forum/index.php?topic=8699.0

1.1 Basic Usage: 
=================
   You need  to have  tcl to use  voltron. Created configure  file you
   must pass to voltron:

  %tclsh voltron.tcl yourconfig


   You can  use sample  configure file [volt.config.tcl.sample]  as your
   base configure file.


   [volt.config.tcl.sample]: http://github.com/osv/voltron/blob/master/volt.config.tcl.sample

2 Creating chat menu 
~~~~~~~~~~~~~~~~~~~~~
  Configure file is  [tcl] source file. But don't  worry, you don't need
  to learn this language for creating your menus.  Below is example of
  simple menu:

   1:  set snd_menuoff sound/misc/menu3
   2:  set snd_menuon  sound/misc/menu1.wav
   3:  
   4:  set 1. {
   5:      {}                  {play $snd_menuon}
   6:      {Evolve "Evolve to:"} {} (ref:ali1)
   7:      {Buy "Buy:"} {}
   8:      {} {}
   9:  }
  10:  set 1.1. {  
  11:      ""                  {play $snd_menuoff}
  12:      "Dretch"            {class level0}
  13:      "Construction Kit"  {sell weapons;sell upgrades;buy ackit; buy ckit;itemact ackit;itemact ckit}
  14:  }
  15:  set 1.2. {
  16:      ""                  {play $snd_menuoff}
  17:      Basilisk            {class level1}
  18:      Rifle               {sell weapons;sell weapons;buy rifle;itemact rifle}
  19:  }


  If you save this sample and run voltron to produce menu:

  %tclsh voltron.tcl yourconfig
  ==> Generate menu:
  Hud file: chatmenu_alien.cfg
  Hud file: chatmenu_human.cfg
  Hud file: chatmenu_spec.cfg
  ==> Generate exec scripts:
  EXEC script for all: chatmenu_install.cfg
  EXEC script team a: chatmenu_alien_install.cfg
  EXEC script team b: chatmenu_human_install.cfg
  EXEC script team s: chatmenu_spect_install.cfg
  %


  After you must copy (if you not set [variables] in your configure file
  before) created files in `ui/hud/common' for example.  *If you don't
  use volt  HUD* then  you must include  all `chatmenu_*.cfg'  in your
  .menu file,  and do exec command  for one of  *install.cfg files. It
  create next menus for different teams:

  menu   | team A (aliens) | team B (humans)     | Spectator  
 --------+-----------------+---------------------+-----------
  root   | Sub Menus:      | Sub Menus:          |            
         | 1. Evolve       | 1. Buy              |            
 --------+-----------------+---------------------+-----------
  menu 1 | Evolve to:      | Buy:                |            
         | 1. Dretch       | 1. Construction Kit |            
         | 2. Basilisk     | 2. rifle            |            

  Full syntax of menu is: 

  set X. {
      {MenuTextForAll MenuHeaderForAll}  CommandForAll
      {MenuAlienText MenuHeaderForAlien} AlienCommands
      {MenuHumText MenuHeaderForHuman}   HumCommands
      {MenuSpecText MenuHeaderForSpec}   SpectatorCommands
  }
  
  set X.Y. {
      MenuTextForAll     CommandForAll
      MenuAlienText      AlienCommands
      MenuHumText        HumCommands
      MenuSpecText       SpectatorCommands
  }

  
  Here is  list of  4 pairs:  all, team a  (aliens), team  b (humans),
  spectator.  First  element of  pair is name  of menu item,  second -
  command for  it.  If its  a root menu  item than first  element is
  pair of name  of menu item and header name  of child submenu. Values
  of pair `all' is joined to other pairs.

  You can take different menu action for different teams, but you need
  to load  that config files in  some way. Voltron  generate 4 install
  files:
  
 - `chatmenu_install.cfg'  - it contain  merged action for  all teams.
   You can load him if you  have no conflict commands. For example you
   have no several  "say" command for different teams  (i.e. you setup
   only `CommandForAll').
 - `chatmenu_alien_install.cfg'  - aliens specified  commands, you may
   need load him when you _join_ to team;
 - `chatmenu_human_install.cfg' - humans specified commands, you may
   need load him when you _join_ to team;
 - `chatmenu_spect_install.cfg' - spectate specified commands, you may
   need load him when you _join_ to team;

  Example of usage `chatmenu_*_install.cfg' files is below:

  set snd_menuoff sound/misc/menu3
  set snd_menuon  sound/misc/menu1.wav
  # menu example
  set 0. {{Join "Join:"}                  {play $snd_menuon} }
  set 0.1. {"Joint alien"                 {team aliens;exec ui/hud/common/chatmenu_alien_install.cfg;play $snd_menuoff}}
  set 0.2. {"Joint human"                 {team humans;exec ui/hud/common/chatmenu_human_install.cfg;play $snd_menuoff}}
  set 0.3. {"Joint spectate"              {team spectate;exec ui/hud/common/chatmenu_spect_install.cfg;play $snd_menuoff}}
  # bind example, select spectate team
  bind F9 "team spectate; exec ui/hud/common/chatmenu_spect_install.cfg"



  [tcl]: http://www.tcl.tk
  [variables]: sec-2.1.2

2.1 Customising 
================
   You can use several variables and commands for configuring.

2.1.1 `bind_keys' 
------------------
    Keys for menu, default is {1 2 3 4 5 6 7 8 9 0 - =}.

2.1.2 `chatmenu_teama' 
-----------------------
    Chat menu output file name  for team A.  Default is `chatmenu_alien.cfg'.

2.1.3 `chatmenu_teamb' 
-----------------------
    Chat menu output file name for team B.  Default is `chatmenu_human.cfg'.

2.1.4 `chatmenu_spect' 
-----------------------
    Chat menu output file name for spectator. Default is `chatmenu_spec.cfg'.

2.1.5 `chatmenu_install' 
-------------------------
    Main chat menu install script that contain all merged binds for all
    teams.  Default is `chatmenu_install.cfg'.

2.1.6 `binds_teama_install' 
----------------------------
    Script   file  for   binds   of  team   A   (aliens).  Default   is
    `chatmenu_alien_install.cfg'.

2.1.7 `binds_teamb_install' 
----------------------------
    Script   file  for   binds   of  team   B   (humans).  Default   is
    `chatmenu_human_install.cfg')

2.1.8 `binds_spect_install' 
----------------------------
    Script    file    for    binds    of    spectator.    Default    is
    `chatmenu_spect_install.cfg')

2.1.9 Template for menu 
------------------------
    You may set menu template different for all teams:
    - `menu_alien_tmpl';
    - `menu_human_tmpl';
    - `menu_spectator_tmpl'.

    Default is:

  set menu_spectator_tmpl "    rect 6 210 400 190
      visible 1
      decoration
      forecolor 45 45 45 1
      textscale 0.25
      autowrapped
      textstyle ITEM_TEXTSTYLE_SHADOWED"


2.1.10 `backspace_cmd' 
-----------------------
    additional command for BACKSPACE  key (primary command is set root
    menu).  Default `play sound/misc/menu4.wav'

2.1.11 `fileSplitSize' 
-----------------------
    Max file size before split. Quake have limits for cfg file size in
    16k.   To prevent fail  load file  will be  split and  used `exec'
    command.

2.1.12 unbind 
--------------
    Quake like  unbind command. This  command have lower  prioritet vs
    bind command.

2.1.13 unbindTeams 
-------------------
    Team specified unbind command. Format of command:

  unbindTeams key team_list


    Where `team_list' is list of:
    - `ali', `alien', `a', `1' -- alien team (team a)
    - `hum', `human', `b', `2' -- human team (team b)
    - `spec', `spectator', `3' -- spectator team

    Example:

  unbindTeams v {hum ali}



2.1.14 bind 
------------
    `bind'  add additional  key  bind  at end  of  install script,  it
    similar to quake bind.

2.1.15 bindTeams 
-----------------
    `bindTeams' is  quake bind command, but team  specified bind. Like
    menu  you  can  load  different `*_install.cfg'  config  file  for
    different teams, and all binds  with this command will be only for
    one of team. Format of command:

  bindTeams key {
       commandForAll
       commandForTeamA
       commandForTeamB
       commandForTeamSpec
   }


    Example: bind INSERT key to spawn as *(Adv)graner* if you in alien
    team or spawn as *human* *builder* and take ckit if you are human:

  set snd_menuoff "sound/misc/menu3"
  
  bindTeams INS {
      {echo ^1Spawn as builder;play $snd_menuoff}
      {class builderupg;class builder}
      {class ackit; class ckit;sell weapons;sell upgrades;buy ackit; buy ckit;itemact ackit;itemact ckit}
      {echo ^1You are spectate}
  }


2.1.16 seta 
------------
    Quake like `seta' command.

2.1.17 setaTeams 
-----------------
    Quake like `seta' command but team specified `seta'. Format of command

  setaTeams var command team_list


    Where `team_list' is list of:
    - `ali', `alien', `a', `1' -- alien team (team a)
    - `hum', `human', `b', `2' -- human team (team b)
    - `spec', `spectator', `3' -- spectator team

    Example:

  # Wall Walk Auto Pitching
  setaTeams cg_wwFollow 0 {alien}


2.1.18 `postInstall' 
---------------------
    Text of  install script  that be at  and. Default is  volt's binds
    like sound control etc. You can easy add some stuff:

  set postInstall "$postInstall
  // some addition stuf
  unbind v
  exec foobaar.cfg"


2.1.19 messages-from-file 
--------------------------
    Create  messages  list  that  allow  you cyclic  run  some  command
    (default is "say" command).  Format of command:

    `messages-from-file variable_name file_source file_dest execpath {prefix {}} {sufix {}} {command {"say"}}'

    -  `variable_name'  is  quake  var  that  you  can  use  by  `vstr
       variable_name' (good to bind some key to it);
    - `file_source' - source file  of lines, file also will be searched
     in directory where configure file is located;
    - `file_dest' - generated configfile location;
    - `execpath' - quakebased path to file;
    - `prefix',  `sufix' -  text that be  concatenate before  and after
      each line of text file;
    - `command' - action to each line of text file (default `say');

    For example you wish to say different "hello". You have file `hello.txt':

  # comment is line that start with #
  Hi
  Hello
  Hola


  In your config you can add:

  messages-from-file Hello \
      "hello.txt"\
      "~/.tremulous/base/ui/hud/common/msg/hello.cfg" \
      ui/hud/common/msg/alienjoin.cfg \
      \o/(  ) say
  # bind it to menu 9.9
  set 9. {{Messages "Messages:"}  {play sound/misc/menu1.wav} }
  set 9.9. { {} {}
      "Hello"  "vstr Hello"
  }




[1] It configured by  default for  creating `chatmenu_install.cfg'
which is  a part of volts's  chatmenu, who is initial  creator of this
chat menu i don't know, but you can inform me :).

